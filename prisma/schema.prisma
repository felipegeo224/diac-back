// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id              Int                   @id @default(autoincrement())
  email           String                @unique
  password        String
  roleId          Int
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  role            Role                  @relation(fields: [roleId], references: [id])
  tickets         Ticket[]              @relation("CreatorTickets")
  comments        Comment[]
  assignedTickets TicketAssignment[]
  history         TicketStatusHistory[]
  notifications   Notification[]
  attachments     Attachment[]
}

model Ticket {
  id          Int                   @id @default(autoincrement())
  title       String
  description String
  status      String
  creatorId   Int
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  creator     User                  @relation(fields: [creatorId], references: [id], name: "CreatorTickets")
  comments    Comment[]
  assignments TicketAssignment[]
  history     TicketStatusHistory[]
  attachments Attachment[]
}

model TicketAssignment {
  userId   Int
  ticketId Int
  user     User   @relation(fields: [userId], references: [id])
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  @@id([userId, ticketId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  ticketId  Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model TicketStatusHistory {
  id        Int      @id @default(autoincrement())
  status    String
  ticketId  Int
  changedBy Int
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [changedBy], references: [id])
}

model Attachment {
  id         Int      @id @default(autoincrement())
  url        String
  ticketId   Int
  uploadedBy Int
  createdAt  DateTime @default(now())
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  user       User     @relation(fields: [uploadedBy], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
